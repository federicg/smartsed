#!/bin/bash
#PBS -S /bin/bash

# Put here the requests for the desired hardware
# number of nodes (nodes), cores per node (ppn), maximum time of execution (HH:MM:SS) queue (name_of_the_queue)
# node: 1 se sequenziale
# cerbero: seriale
# gigat: parallelo
#PBS -l nodes=1:ppn=1,walltime=100:00:00 -q cerbero

# Set the job name (dai un nome al lavoro che visualizzerai quando run)
#PBS -N Simulation50

# Set the output file and merge it to the sterr
# file di output and input se desideri nominarli in un modo specifico, altrimenti li salva in un unico file che definisci dopo.
#PBS -o idra.steam.out
#PBS -e idra.steam.err

NPROCS=$(wc -l < $PBS_NODEFILE)
JOBID=${PBS_JOBID}
OUTFILE=out.$NPROCS
ERRFILE=err.$NPROCS

#PBS_O_WORKDIR=$PWD
# Start the job in the current directory (PBS starts in the home folder)
# CosÃ¬ lancio nella cartella corrente
mkdir -p ${PBS_O_WORKDIR}/../Outputs/$JOBID
mkdir -p ${PBS_O_WORKDIR}/../Outputs/$JOBID/DeterministicProgram
mkdir -p ${PBS_O_WORKDIR}/../Outputs/$JOBID/run
mkdir -p ${PBS_O_WORKDIR}/../Outputs/$JOBID/Outputs
#cd ${PBS_O_WORKDIR}/$JOBID

#cp -r ${PBS_O_WORKDIR}/../Outputs/initial_cond_H ${PBS_O_WORKDIR}/../Outputs/$JOBID/Outputs/
cp -r ${PBS_O_WORKDIR}/../Outputs/initial_cond ${PBS_O_WORKDIR}/../Outputs/$JOBID/Outputs/
cp -r ${PBS_O_WORKDIR}/../Geostatistics ${PBS_O_WORKDIR}/../Outputs/$JOBID/
cp -r ${PBS_O_WORKDIR}/../Inputs ${PBS_O_WORKDIR}/../Outputs/$JOBID/
cp ${PBS_O_WORKDIR}/runAll.sh ${PBS_O_WORKDIR}/../Outputs/$JOBID/run/runAll.sh
cp ${PBS_O_WORKDIR}/SMARTSED_input_ev ${PBS_O_WORKDIR}/../Outputs/$JOBID/run/SMARTSED_input 
cp ${PBS_O_WORKDIR}/../DeterministicProgram/main.exe ${PBS_O_WORKDIR}/../Outputs/$JOBID/DeterministicProgram/main.exe


## Print information
cat > $OUTFILE << EOF
Script host:        ${PBS_O_HOST}
Allocated nodes:    $(cat ${PBS_NODEFILE} -)
Working dir:        $PBS_O_WORKDIR
job id:             $JOBID
Running on:         $(hostname)
Time:               $(date)
EOF

# Echo the PBS input file (this file)
#cat qsub_script.sub
#echo
#echo
#echo "#><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>#"
#echo
#echo

# Qui vanno le definizioni e esportazioni di variabili d'ambiente, 
# eventualmente anche tramite il caricamento di moduli ambientali
#export VARIABILE
#module load modulname



export mkPrefix=/u/sw
source ${mkPrefix}/etc/profile
module load gcc-glibc/7
module load R
module load gdal
module unload python
#export PATH=/u/archive/laureandi/gatti/smartsed/DeterministicProgram/python/python-interpreter/python-3.8.1/bin:$PATH
export PYTHONPATH=


#export PYTHONPATH=
#export mkPrefix=/u/sw
#source ${mkPrefix}/etc/profile
#module load gcc-glibc
#module load scipy
#export PYTHONPATH=

#
#
#ulimit -s unlimited # make sure we can put big arrays on the stack
#date

#---------------------------------------------------------------------#
# Now run the executable
# Nella riga successiva si deve scrivere il/i comando/i di lancio
# completo di redirezione di input e/o output se necessario
#  YOUR LAUNCH COMMAND BELOW completed with I/O redirection if needed

nsim=1
res=7


cd ${PBS_O_WORKDIR}/../Outputs/$JOBID/run
./runAll.sh $nsim $res >>$OUTFILE 2>$ERRFILE
#./../runStochastic.sh $nsim $res >>$OUTFILE 2>$ERRFILE


#export mkPrefix=/u/sw
#source ${mkPrefix}/etc/profile
#module load gcc-glibc/
#module load python/3.7.2




#./../runDeterministic.sh $nsim $res >>$OUTFILE 2>$ERRFILE
#Rscript ../DownscalingSimulationSoilGrids.R >>$OUTFILE 2>$ERRFILE

#python3 simulazione.py >output_simul_50.txt 2>&1

#---------------------------------------------------------------------#

date
